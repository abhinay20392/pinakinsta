# A very simple Flask Hello World app for you to get started with...

from flask import Flask, request, jsonify
import mysql.connector
from socket import gethostname
import hashlib
import werkzeug
import os

app = Flask(__name__)
basedir = os.path.abspath(os.path.dirname(__file__))

#Live Settings
dbName ="abhinay20392$pinakinsta"
dbHost ="abhinay20392.mysql.pythonanywhere-services.com"
dbUser ="abhinay20392"
dbPass ="gappu@123"
dbAuthPlugin ="mysql_native_password"

# #Live Settings
# dbName ="pinakinsta"
# dbHost ="localhost"
# dbUser ="root"
# dbPass ="gappu@123"
# dbAuthPlugin ="mysql_native_password"



#SQLALCHEMY_TRACK_MODIFICATIONS = False
#app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'user.sqlite')
#db = SQLAlchemy(app)
#ma = Marshmallow(app)
os.makedirs(os.path.join(basedir, 'uploads'), exist_ok=True)

@app.route('/')
def hello_world():
    return 'Hello from Flask!'

# endpoint to create new user
@app.route("/register", methods=["POST"])
def register():
    name = request.json['name']
    email = request.json['email']
    password = hashlib.sha256(request.json['password'].encode('utf-8')).hexdigest()

    phone = request.json['phone']

    if name and email and password and phone:
        sql = "INSERT INTO tbl_user(name, email, password, phone) VALUES(%s, %s, %s, %s)"
        data = (name, email, password, phone)
        conn = mysql.connector.connect(host=dbHost, user=dbUser, password=dbPass, database=dbName, auth_plugin=dbAuthPlugin)
        cursor = conn.cursor()
        cursor.execute(sql, data)
        conn.commit()
        conn.close()
        print(conn)
        return jsonify(status = True, message = "Register success!")
    else:
        return not_found()


# endpoint to login user
@app.route("/login", methods=["POST"])
def login():
    phone = request.json['phone']
    password = request.json['password']
    conn = mysql.connector.connect(host=dbHost, user=dbUser, password=dbPass, database=dbName, auth_plugin=dbAuthPlugin)
    cursor = conn.cursor(dictionary=True)
    print()
    cursor.execute("SELECT * FROM tbl_user WHERE phone="+phone)
    row = cursor.fetchone()
    print(row['password'])
    print(hashlib.md5(password.encode()).hexdigest())
    conn.commit()
    conn.close()
    if row:
        if(row['password'] == hashlib.sha256(password.encode('utf-8')).hexdigest()):
            return jsonify(status = True, message = "Login success!", data=row)
        else:
            return jsonify(status = False, message = "Wrong Password")
    else:
        return jsonify(status = False, message = "No user found with this phone")


# endpoint to show all users
@app.route("/user", methods=["GET"])
def get_user():
    conn = mysql.connector.connect(host=dbHost, user=dbUser, password=dbPass, database=dbName, auth_plugin=dbAuthPlugin)
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM tbl_user")
    row = cursor.fetchall()
    conn.commit()
    conn.close()
    if row:
        return jsonify(status = True, message = "Success!", data=row)
    else:
        return jsonify(status = False, message = "No user found")
# endpoint to show all users
@app.route("/updateStatus", methods=["POST"])
def upDateStatus():
    imagefile = request.files['image']
    print(request.form)
    filename = werkzeug.utils.secure_filename(imagefile.filename)
    print("\nReceived image File name : " + imagefile.filename)
    imagefile.save(os.path.join(basedir, 'uploads', filename))
    #imagefile.save(filename)

    name = imagefile.filename
    mediaType = request.form['mediaType']
    mediaUpdloadedById = request.form['mediaUpdloadedById']
    mediaUploadedByName = request.form['mediaUploadedByName']
    mediaUploadedByTimeStamp = request.form['mediaUploadedByTimeStamp']
    mediaUploadedByLocationLat = request.form['mediaUploadedByLocationLat']
    mediaUploadedByLocationLon = request.form['mediaUploadedByLocationLon']
    mediaUploadedByLocationName = request.form['mediaUploadedByLocationName']
    mediaCaption = request.form['mediaCaption']

    sql = "INSERT INTO tbl_media(mediaType, mediaUpdloadedById, mediaUploadedByName, mediaUploadedByTimeStamp, mediaUploadedByLocationLat, mediaUploadedByLocationLon , mediaUploadedByLocationName, mediaUploadedByUrl ,mediaCaption) VALUES(%s, %s, %s, %s,%s, %s, %s, %s, %s)"
    data = (mediaType, mediaUpdloadedById, mediaUploadedByName, mediaUploadedByTimeStamp, mediaUploadedByLocationLat, mediaUploadedByLocationLon, mediaUploadedByLocationName, name, mediaCaption)
    conn = mysql.connector.connect(host=dbHost, user=dbUser, password=dbPass, database=dbName, auth_plugin=dbAuthPlugin)
    cursor = conn.cursor()
    cursor.execute(sql, data)
    conn.commit()
    conn.close()
    print(conn)
    return jsonify(status = True, message = "Upload success, photo will be made public once approved")


# endpoint to show all media
@app.route("/allMedia", methods=["GET"])
def get_media():
    conn = mysql.connector.connect(host=dbHost, user=dbUser, password=dbPass, database=dbName, auth_plugin=dbAuthPlugin)
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM tbl_media where verified=1")
    
    row = cursor.fetchall()
    conn.commit()
    conn.close()
    if row:
        return jsonify(status = True, message = "Success!", data=row)
    else:
        return jsonify(status = False, message = "No media found")
        
        # endpoint to show all media
@app.route("/allMediaAdmin", methods=["GET"])
def get_media_all():
    conn = mysql.connector.connect(host=dbHost, user=dbUser, password=dbPass, database=dbName, auth_plugin=dbAuthPlugin)
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM tbl_media where verified=-1")
    
    row = cursor.fetchall()
    conn.commit()
    conn.close()
    if row:
        return jsonify(status = True, message = "Success!", data=row)
    else:
        return jsonify(status = False, message = "No media found")


# endpoint to delete user
@app.route("/deleteMedia", methods=["POST"])
def user_delete():
    mediaId = request.json['mediaId']
    conn = mysql.connector.connect(host=dbHost, user=dbUser, password=dbPass, database=dbName, auth_plugin=dbAuthPlugin)
    cursor = conn.cursor()
    sql = "DELETE FROM tbl_media WHERE mediaId="+str(mediaId)
    data = (mediaId)
    cursor.execute(sql)
    conn.commit()
    conn.close()
    return jsonify(status = True, message = "Post Deleted")


# endpoint to update media status
@app.route("/verifyMedia", methods=["POST"])
def verifyMedia():
    mediaId = request.json['mediaId']
    value = request.json['value']
    conn = mysql.connector.connect(host=dbHost, user=dbUser, password=dbPass, database=dbName, auth_plugin=dbAuthPlugin)
    cursor = conn.cursor()
    print()
    sql = "UPDATE tbl_media SET verified =%s WHERE mediaId=%s"
    data = (value, mediaId)
    cursor.execute(sql, data)
    conn.commit()
    conn.close()
    return jsonify(status = True, message = "success!")

# endpoint to update user status
@app.route("/updateUser", methods=["POST"])
def updateUser():
    userId = request.json['userId']
    value = request.json['value']
    conn = mysql.connector.connect(host=dbHost, user=dbUser, password=dbPass, database=dbName, auth_plugin=dbAuthPlugin)
    cursor = conn.cursor()

    sql = "UPDATE tbl_user SET isActive=%s  WHERE userId=%s"
    data = (value, userId)
    cursor.execute(sql, data)
    conn.commit()
    conn.close()
    print(cursor)
    return jsonify(status = True, message = "success!")





@app.errorhandler(404)
def not_found(error=None):
    message = {
        'status': 404,
        'message': 'Not Found: ' + request.url,
    }
    resp = jsonify(message)
    resp.status_code = 404

    return resp
